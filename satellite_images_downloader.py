# -*- coding: utf-8 -*-
"""
/***************************************************************************
 SatelliteImagesDownloader
                                 A QGIS plugin
 This plugin helps you search and download satellite images
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2018-03-27
        git sha              : $Format:%H$
        copyright            : (C) 2018 by Roman Vasilyev, USATU, Ufa
        email                : sektor_wins@mail.ru
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from PyQt5.QtCore import QSettings, QTranslator, qVersion, QCoreApplication
from PyQt5.QtGui import QIcon
from PyQt5.QtWidgets import QAction, QProgressBar, QApplication, QFileDialog
from qgis.gui import QgsMessageBar
from qgis.core import QgsProject, QgsRasterLayer
# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .satellite_images_downloader_dialog import SatelliteImagesDownloaderDialog
import os
import satsearch
from satsearch.search import Search, Query
from satsearch.scene import Scenes
import requests
import logging
from.globals import SATELLITES, KEYWORD_ARGS
from .workers import DownloadWorker


KWARGS = KEYWORD_ARGS
FILEKEYS = []

class SatelliteImagesDownloader:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'SatelliteImagesDownloader_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)

            if qVersion() > '4.3.3':
                QCoreApplication.installTranslator(self.translator)

        # Create the dialog (after translation) and keep reference
        self.dlg = SatelliteImagesDownloaderDialog()
        self.dlg.setWindowTitle("Поиск и загрузка космоснимков")
        self.dlg.setWindowIcon(QIcon("icon.png"))
        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Download Satellite Images')

        self.toolbar = self.iface.addToolBar(u'SatelliteImagesDownloader')
        self.toolbar.setObjectName(u'SatelliteImagesDownloader')
        self.add_satellites_combobox(SATELLITES)

        self.worker = DownloadWorker(self.dlg.logWindow)
        self.dlg.searchScenesButton.clicked.connect(self.finding_scenes)
        self.dlg.selectFolderButton.clicked.connect(self.showFolderDialog)
        self.dlg.downloadScenesButton.clicked.connect(self.downloading_scenes)
        self.dlg.stopDownloadingButton.clicked.connect(self.stop_worker)
        self.dlg.OSMButton.clicked.connect(self.displayOSM)

        # self.dlg.finished.connect(self.stop_worker)

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('SatelliteImagesDownloader', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this="Инструмент для поиска и загрузки космоснимков",
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            self.toolbar.addAction(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/satellite_images_downloader/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u''),
            callback=self.run,
            parent=self.iface.mainWindow())


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Download Satellite Images'),
                action)
            self.iface.removeToolBarIcon(action)
        # remove the toolbar
        del self.toolbar


    def stop_worker(self):
        """
        Вспомогательная функция для остановки работы воркера (потока)
        """
        self.worker.stop()
        self.worker.quit()
        self.worker.wait()


    def showFolderDialog(self):
        """
        Отображает диалоговое окно для выбора директории сохранения снимков 
        и сохраняет выбор в текстовое поле.
        """
        folder_path = QFileDialog.getExistingDirectory(self.dlg, "Выберите папку","",QFileDialog.ShowDirsOnly)
        self.dlg.folderPath_lineEdit.setText(folder_path)


    def add_satellites_combobox(self, satellites_list):
        """
        Добавляет в комбобокс список доступных спутников 
        из конфига globals.SATELLITES.
        """
        self.dlg.satelliteName_comboBox.addItems(satellites_list)


    def displayOSM(self):
        """
        Скачивает подложку OSM, добавляет ее в проект 
        и отображает в списке слоев.
        """
        tempDir = QgsProject.instance().fileName()
        response = requests.get("http://www.gdal.org/frmt_wms_openstreetmap_tms.xml", stream=True)
        if response.status_code != 200:
            return None

        OSM_file = tempDir + "/OSM.xml"
        with open(OSM_file, 'wb') as f:
            for chunk in response.iter_content(chunk_size=1024):
                if chunk:
                    f.write(chunk)

        OSM_layer = self.iface.addRasterLayer(OSM_file, "OpenStreetMap")
        OSM_layer.setName("OpenStreetMap")
        return OSM_layer


    def checking_landsat8_category(self):
        """
        Проверяет какие категории снимков Landsat-8 были выбраны.
        """
        if self.dlg.categoryT1_checkBox.isChecked():
            
            if "COLLECTION_CATEGORY" in KWARGS:
                KWARGS["COLLECTION_CATEGORY"] += "T1,"
            else:
                KWARGS["COLLECTION_CATEGORY"] = "T1,"
        if self.dlg.categoryT2_checkBox.isChecked():

            if "COLLECTION_CATEGORY" in KWARGS:
                KWARGS["COLLECTION_CATEGORY"] += "T2,"
            else:
                KWARGS["COLLECTION_CATEGORY"] = "T2,"
        if self.dlg.categoryRT_checkBox.isChecked():

            if "COLLECTION_CATEGORY" in KWARGS:
                KWARGS["COLLECTION_CATEGORY"] += "RT,"
            else:
                KWARGS["COLLECTION_CATEGORY"] = "RT,"


    def check_landsat8_filekeys(self):
        """
        Проверяет какие каналы (файлы) к загрузке были выбраны для Landsat-8.
        """
        if self.dlg.L8MTL_checkBox.isChecked():
            FILEKEYS.append("MTL")

        for i in range(1,12):
            t = "self.dlg.L8B" + str(i) + "_checkBox.isChecked()"
            cast_t = eval(t)
            if cast_t:
                FILEKEYS.append("B"+str(i))


    def check_sentinel2_filekeys(self):
        """
        Проверяет какие каналы (файлы) к загрузке были выбраны для Sentinel-2.
        """
        if self.dlg.S2B8A_checkBox.isChecked():
            FILEKEYS.append("8A")

        for i in range(1,12):
            t = "self.dlg.S2B" + str(i) + "_checkBox.isChecked()"
            cast_t = eval(t)
            if cast_t:
                if i<10:
                    FILEKEYS.append("0"+str(i))
                else:
                    FILEKEYS.append("1"+str(i))


    def clearing_landsat8_category(self):
        """
        Вспомогательная функция для очистки параметра категории снимков L8.
        """
        if "COLLECTION_CATEGORY" in KWARGS: del KWARGS["COLLECTION_CATEGORY"]

    
    def clear_filekeys(self):
        """
        Вспомогательная функция для очистки списка ключей для загрузки каналов.
        """
        del FILEKEYS[:]


    def finding_scenes(self):
        """
        Делает запрос по АПИ на количество снимков согласно выбранным параметрам.
        """
        SATTELITE_NAME = str(self.dlg.satelliteName_comboBox.currentText())
        CLOUD_FROM = str(self.dlg.cloudFrom_spinBox.value())
        CLOUD_TO = str(self.dlg.cloudTo_spinBox.value())
        DATE_FROM = str(self.dlg.dateEdit.date().toPyDate())
        DATE_TO = str(self.dlg.dateEdit_2.date().toPyDate())

        KWARGS["satellite_name"] = SATTELITE_NAME
        KWARGS["cloud_from"] = CLOUD_FROM
        KWARGS["cloud_to"] = CLOUD_TO
        KWARGS["date_from"] = DATE_FROM
        KWARGS["date_to"] = DATE_TO

        if SATTELITE_NAME == "Landsat-8 OLI/TIRS":
            self.checking_landsat8_category()

        self.iface.messageBar().pushInfo("Message", "Выполняется поиск")

        simple_query_result = Query(**KWARGS).found()
        self.dlg.logWindow.appendPlainText(str(simple_query_result)+" снимков найдено")

        self.clearing_landsat8_category()

        self.iface.messageBar().pushSuccess("Message", "Снимки найдены")


    def downloading_scenes(self):
        
        self.clearing_landsat8_category()
        self.clear_filekeys()

        if not os.path.exists(self.dlg.folderPath_lineEdit.text()):
            self.dlg.logWindow.appendPlainText("Введите корректный путь к директории!")
            return None

        SATTELITE_NAME = str(self.dlg.satelliteName_comboBox.currentText())
        CLOUD_FROM = str(self.dlg.cloudFrom_spinBox.value())
        CLOUD_TO = str(self.dlg.cloudTo_spinBox.value())
        DATE_FROM = str(self.dlg.dateEdit.date().toPyDate())
        DATE_TO = str(self.dlg.dateEdit_2.date().toPyDate())

        KWARGS["satellite_name"] = SATTELITE_NAME
        KWARGS["cloud_from"] = CLOUD_FROM
        KWARGS["cloud_to"] = CLOUD_TO
        KWARGS["date_from"] = DATE_FROM
        KWARGS["date_to"] = DATE_TO

        if SATTELITE_NAME == "Landsat-8 OLI/TIRS":
            self.checking_landsat8_category()
            self.check_landsat8_filekeys()
        elif SATTELITE_NAME == "Sentinel-2":
            self.check_sentinel2_filekeys()

        scenes_query_result = Query(**KWARGS).scenes()
        scenes = Scenes(scenes_query_result)
        
        PATH = str(self.dlg.folderPath_lineEdit.text()) + "/"
        self.dlg.logWindow.appendPlainText("Файлы будут загружены в директорию: " + PATH)
        self.dlg.logWindow.appendPlainText("К загрузке представлено сцен - " + str(len(scenes)))
        self.dlg.logWindow.appendPlainText("Каналы (файлы) к загрузке - " + ", ".join(FILEKEYS))

        self.dlg.stopDownloadingButton.setEnabled(True)

        self.worker.scenes = scenes.scenes
        self.worker.filekeys = FILEKEYS
        self.worker.path = PATH
        self.worker.start()


    def run(self):
        """Run method that performs all the real work"""
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            pass